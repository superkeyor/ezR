% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sjmisc18.R
\name{ez.labels.set}
\alias{ez.labels.set}
\alias{ez.setlabels}
\title{set value labels, wrapper of \code{\link{sjmisc_set_labels}}.}
\usage{
ez.labels.set(x, valuelabels, force.labels = FALSE, force.values = FALSE, ...)

ez.setlabels(x, valuelabels, force.labels = FALSE, force.values = FALSE, ...)
}
\value{
returns a new changed var
}
\description{
set value labels, wrapper of \code{\link{sjmisc_set_labels}}.
}
\note{
The usage of the original function is a bit confusing. Here, I summarize:
\cr 1) Always use a named vector for valuelabels, in which case force.labels and force.values will be ignored
\cr valuelabels:
\cr 1 4 5 9 do not have to all appear in x, that is, you can assign more labels than values (or vice versa, assign less labels)
\cr notice the particular order and symbol: "strongly agree" <- 1
\cr sjmisc_set_labels(x, c("strongly agree"=1,"totally disagree"=4,"refused"=5,"missing"=9))
\cr This format is flipped from the results directly from ez.getlabels
\cr
\cr 2) when valuelabels="", essentially clear value labels attribute
\cr
\cr 3) if no exisiting attr, using haven style: labels
\cr
\cr 4) though x could be df, I generally use x as var
\cr
\cr example: df$gradelevel = ez.setlabels(df$gradelevel, c("freshman"=1,"Sophomore"=2,"Junior"=3,"Senior"=4))
}
\seealso{
\code{\link[tidyr]{gather}}, \code{\link[tidyr]{spread}}, \code{\link[tidyr]{separate}}, \code{\link[tidyr]{unite}}
\cr \code{\link[dplyr]{select}}, \code{\link[dplyr]{slice}}
\cr \code{\link[dplyr]{distinct}}, \code{\link[dplyr]{arrange}}
\cr \code{\link[dplyr]{summarise}}, \code{\link[dplyr]{count}}, \code{\link[dplyr]{mutate}}
\cr \code{\link[dplyr]{group_by}}, \code{\link[dplyr]{left_join}}, \code{\link[dplyr]{right_join}}, \code{\link[dplyr]{inner_join}}, \code{\link[dplyr]{full_join}}, \code{\link[dplyr]{semi_join}}, \code{\link[dplyr]{anti_join}}
\cr \code{\link[dplyr]{intersect}}, \code{\link[dplyr]{union}}, \code{\link[dplyr]{setdiff}}
\cr \code{\link[dplyr]{bind_rows}}, \code{\link[dplyr]{bind_cols}}

Other data transformation functions: 
\code{\link{ez.2char}()},
\code{\link{ez.2factor}()},
\code{\link{ez.2label}()},
\code{\link{ez.2long}()},
\code{\link{ez.2lower}()},
\code{\link{ez.2value}()},
\code{\link{ez.2wide}()},
\code{\link{ez.compute}()},
\code{\link{ez.del}()},
\code{\link{ez.label.get}()},
\code{\link{ez.label.set}()},
\code{\link{ez.labels.get}()},
\code{\link{ez.move}()},
\code{\link{ez.newcol}()},
\code{\link{ez.num}()},
\code{\link{ez.recode}()},
\code{\link{ez.recols}()},
\code{\link{ez.recol}()},
\code{\link{ez.rename}()},
\code{\link{ez.replace}()},
\code{\link{ez.rncols}()},
\code{\link{ez.rncol}()},
\code{\link{ez.select}()},
\code{\link{ez.sort}()},
\code{\link{ez.split}()},
\code{\link{ez.str}()},
\code{\link{ez.unique}()},
\code{\link{left_join}()}
}
\concept{data transformation functions}
